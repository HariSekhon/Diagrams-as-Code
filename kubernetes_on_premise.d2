#!/usr/bin/env d2 --theme 200
#
#  Author: Hari Sekhon
#  Date: 2023-05-06 00:27:56 +0100 (Sat, 06 May 2023)
#
#  vim:ts=2:sts=2:sw=2:et:filetype=d2
#
#  https://github.com/HariSekhon/Diagrams-as-Code
#
#  License: see accompanying Hari Sekhon LICENSE file
#
#  If you're using my code you're welcome to connect with me on LinkedIn and optionally send me feedback to help steer this or other code I publish
#
#  https://www.linkedin.com/in/HariSekhon
#

# ============================================================================ #
#                  K u b e r n e t e s   O n - p r e m i s e
# ============================================================================ #

direction: right

title: {
  label: Kubernetes On-Premise
  near: top-center
  shape: text
  style.font-size: 40
  style.underline: true
}

classes: {
  dns: {
    label: DNS
    icon: https://icons.terrastruct.com/gcp%2FProducts%20and%20services%2FNetworking%2FCloud%20DNS.svg
    shape: image
  }
  network: {
    #icon: https://icons.terrastruct.com/essentials%2F092-network.svg
    #icon: https://diagrams.mingrammer.com/img/resources/onprem/network/haproxy.png
    icon: https://diagrams.mingrammer.com/img/resources/gcp/network/routes.png
    shape: image
  }
  storage: {
    label: "HA Networked Storage\nfor Kubernetes\nPersistent Volumes"
    icon: https://icons.terrastruct.com/azure%2FStorage%20Service%20Color%2FGeneral%20Storage.svg
    shape: image
  }
  load_balancer: {
    label: "HA Master Load Balancer\n(HAProxy / Nginx / Traefik / Kong)"
    # there isn't a good generic load balancer icon so using this for now - switch to one of the product specific icons if you know which one
    #icon: https://diagrams.mingrammer.com/img/resources/aws/network/elastic-load-balancing.png
    icon: https://diagrams.mingrammer.com/img/resources/onprem/network/haproxy.png
    # icon: https://diagrams.mingrammer.com/img/resources/onprem/network/kong.png
    # icon: https://diagrams.mingrammer.com/img/resources/onprem/network/traefik.png
    # icon: https://landscape.cncf.io/logos/metal-lb.svg
    shape: image
  }
  metallb: {
    label: MetalLB
    # icon: https://devopstales.github.io/img/metallb2.png
    icon: https://metallb.universe.tf/images/logo/metallb-white.png
    shape: image
  }
  k8s: {
    icon: https://icons.terrastruct.com/azure%2F_Companies%2FKubernetes.svg
    shape: image
  }
  k8s_ingress: {
    icon: https://diagrams.mingrammer.com/img/resources/k8s/network/ing.png
    shape: image
  }
  server: {
    icon: https://icons.terrastruct.com/essentials%2F112-server.svg
  }
}

users -> DNS -> user_network
DNS.class: dns

users: Users {
  icon: https://icons.terrastruct.com/essentials%2F359-users.svg
  shape: image
}

user_network: Network {class: network}

user_network -> lb1
user_network -> lb2

#user_network -> Server 1.metallb1
#user_network -> Server 2.metallb2
#user_network -> Server 3.metallb3

lb1: {class: load_balancer}
lb2: {class: load_balancer}
# lb1 -- lb2: VRRP

lb1 -> network
lb2 -> network

network: Network {
  class: network
  # style.opacity: 0
}

network -> Server 1
network -> Server 2
network -> Server 3

Server 1 {
  class: server
  metallb1.class: metallb
  metallb1 -> kube1
#  metallb1 -> _.Server 2.kube2
#  metallb1 -> _.Server 3.kube3
  kube1: Kubernetes 1 {class: k8s}
}
Server 2 {
  class: server
  metallb2.class: metallb
  metallb2 -> kube2
#  metallb2 -> _.Server 1.kube1
#  metallb2 -> _.Server 3.kube3
  kube2: Kubernetes 2 {class: k8s}
}
Server 3 {
  class: server
  metallb3.class: metallb
  metallb3 -> kube3
#  metallb3 -> _.Server 1.kube1
#  metallb3 -> _.Server 2.kube2
  kube3: Kubernetes 3 {class: k8s}
}

# Server 1 -- Server 2 -- Server 3: VRRP {style.stroke-dash: 5}
# Server 2 -- Server 3: VRRP {style.stroke-dash: 5}

# keepalived1: KeepAlive 1
# keepalived2: KeepAlive 2

# lb1 -- keepalived1 -- keepalived2 -- lb2

Server 1 -> storage_network
Server 2 -> storage_network
Server 3 -> storage_network

storage_network: Network {class: network}

storage_network -> storage

storage: {class: storage}
